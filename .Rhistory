%%%for installing pacman
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr) %%%dplyr library for language R to make data analysis fast.
%%%%GGally provide numeric and categorical datatypes%%%ggthemes for data visualization.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
rio_csv <- import("https://raw.githubusercontent.com/Zain-Butt20/Team-Research-and-Dev-Project-A13-7COM1079/refs/heads/main/Data%20Science%20Salary%202021%20to%202023.csv")
head(rio_csv)
plot(rio_csv$work_year)
plot(rio_csv$work_year, rio_csv$salary_in_usd)
hist(rio_csv$salary_in_usd)
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
pairwise_test <- pairwise.wilcox.test(rio_csv$salary_in_usd, rio_csv$experience_level,
paired = FALSE, p.adjust.method = "bonferroni")
print(pairwise_test)
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salaray", main="LOL")
rio_csv <- import("https://raw.githubusercontent.com/Zain-Butt20/Team-Research-and-Dev-Project-A13-7COM1079/refs/heads/main/Data%20Science%20Salary%202021%20to%202023.csv")
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
ggplot(rio_csv, aes(x = salary_in_usd, fill = experience_level)) +
geom_histogram(binwidth = 5000, color = "black", alpha = 0.7) +
labs(title = "Salary Distribution by Experience Level", x = "Salary (USD)", y = "Count") +
theme_minimal() +
facet_wrap(~experience_level)
ggplot(rio_csv, aes(x = salary_in_usd, fill = experience_level)) +
geom_histogram(binwidth = 5000, color = "black", alpha = 0.7) +
labs(title = "Salary Distribution by Experience Level", x = "Salary (USD)", y = "Count") +
theme_minimal() +
facet_wrap(~experience_level)
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_line() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_point() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
ggplot(rio_csv, aes(x = experience_level, fill = experience_level)) +
geom_bar() +
labs(title = "Frequency of Experience Levels", x = "Experience Level", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")
ggplot(rio_csv, aes(x = experience_level, fill = experience_level)) +
geom_bar() +
labs(title = "Frequency of Experience Levels", x = "Experience Level", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")
# SAVE CSV FILE TO DATAFRAME
df<- rio_csv
#SAVE EACH CLASS OF EXPERIENCE LEVEL INDEPENDENTLY
entry_level <- subset(df, experience_level == "EN")
experienced_level <- subset(df, experience_level == "EX")
mid_level <- subset(df, experience_level == "MI")
senior_level <- subset(df, experience_level == "SE")
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
ggplot(entry_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(entry_level, aes(x = salary_in_usd)) +
geom_freqpoly(binwidth = 5000, color = "blue", size = 1.2) +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(experienced_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(mid_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(senior_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salaray", main="LOL")
ggplot(df_year, aes(x = experience_level, y = salary, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
ggplot(entry_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salaray", main="LOL")
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
ggplot(entry_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
rio_csv <- import("https://raw.githubusercontent.com/Zain-Butt20/Team-Research-and-Dev-Project-A13-7COM1079/refs/heads/main/Data%20Science%20Salary%202021%20to%202023.csv")
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salaray", main="LOL")
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
hist(rio_csv$salary_in_usd)
options(scipen = 999)
hist(rio_csv$salary_in_usd)
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
hist(rio_csv$salary_in_usd)
hist(rio_csv$salary_in_usd, breaks =30, col = "blue")
ggplot(rio_csv, aes(x = salary_in_usd)) +
geom_histogram(bins = 30, color = "black", fill = "blue", alpha = 0.7) +
labs(title = "Histogram of Salary",
x = "Salary",
y = "Frequency") +
theme_minimal()
pairwise_t_result <- pairwise.t.test(data$salary_in_usd, data$experience_level, p.adjust.method = "bonferroni")
pairwise_t_result <- pairwise.t.test(rio_csv$salary_in_usd, rio_csv$experience_level, p.adjust.method = "bonferroni")
print(pairwise_t_result)
ggplot(rio_csv, aes(x = salary_in_usd, fill = experience_level)) +
geom_histogram(binwidth = 5000, color = "black", alpha = 0.7) +
labs(title = "Salary Distribution by Experience Level", x = "Salary (USD)", y = "Count") +
theme_minimal() +
facet_wrap(~experience_level)
ggplot(rio_csv, aes(x = experience_level, fill = experience_level)) +
geom_bar() +
labs(title = "Frequency of Experience Levels", x = "Experience Level", y = "Frequency") +
theme_minimal() +
theme(legend.position = "none")
ggplot(entry_level, aes(x = salary_in_usd)) +
geom_histogram(binwidth = 5000, fill = "skyblue", color = "black") +
labs(title = "Frequency of Salaries for Entry-Level Employees", x = "Salary (USD)", y = "Frequency") +
theme_minimal()
ggplot(df_year, aes(x = experience_level, y = salary, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
hist(entry_level,breaks=20, col = "red")
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
hist(entry_level,breaks=20, col = "red")
#SAVE EACH CLASS OF EXPERIENCE LEVEL INDEPENDENTLY
entry_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EN"]
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
hist(entry_level,breaks=20, col = "red")
#SAVE EACH CLASS OF EXPERIENCE LEVEL INDEPENDENTLY
entry_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EN"]
experienced_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EX"]
mid_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "MI"]
senior_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "SE"]
hist(mid_level,breaks=20, col = "red")
hist(senior_level,breaks=20, col = "red")
hist(experienced_level,breaks=20, col = "red")
hist(senior_level,breaks=20, col = "red")
hist(mid_level,breaks=20, col = "red")
ggplot(rio_csv, aes(x = experience_level, y = salary_in_usd, fill = experience_level)) +
geom_boxplot() +
labs(title = "Salary Distribution by Experience Level", x = "Experience Level", y = "Salary (USD)") +
theme_minimal() +
theme(legend.position = "none")
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salaray", main="LOL")
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salary", main="LOL")
options(scipen = 999)
hist(rio_csv$salary_in_usd, breaks =30, col = "blue")
library(pacman)  # No message.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
rio_csv <- import("https://raw.githubusercontent.com/Zain-Butt20/Team-Research-and-Dev-Project-A13-7COM1079/refs/heads/main/Data%20Science%20Salary%202021%20to%202023.csv")
head(rio_csv)
# SAVE CSV FILE TO DATAFRAME
df<- rio_csv
#SAVE EACH CLASS OF EXPERIENCE LEVEL INDEPENDENTLY
entry_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EN"]
experienced_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EX"]
mid_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "MI"]
senior_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "SE"]
#SAVE EACH CLASS OF EXPERIENCE LEVEL INDEPENDENTLY
entry_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EN"]
experienced_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "EX"]
mid_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "MI"]
senior_level <- rio_csv$salary_in_usd [rio_csv$experience_level == "SE"]
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
hist(entry_level,breaks=20, col = "red")
hist(mid_level,breaks=20, col = "red")
hist(senior_level,breaks=20, col = "red")
hist(experienced_level,breaks=20, col = "red")
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salary", main="LOL")
options(scipen = 999)
options(scipen = 999)
#PLOT EACH LEVEL SEPERATELY AGAINST SALARY
hist(entry_level,breaks=20, col = "red")
hist(mid_level,breaks=20, col = "red")
hist(senior_level,breaks=20, col = "red")
hist(experienced_level,breaks=20, col = "red")
#...............................................
#checking normality
boxplot(rio_csv$salary_in_usd ~ rio_csv$experience_level, xlab= "experience levels", ylab= "salary", main="LOL")
options(scipen = 999)
hist(rio_csv$salary_in_usd, breaks =30, col = "blue")
pairwise_t_result <- pairwise.t.test(rio_csv$salary_in_usd, rio_csv$experience_level, p.adjust.method = "bonferroni")
print(pairwise_t_result)
hist(rio_csv$salary_in_usd, breaks =20, col = "blue")
hist(rio_csv$salary_in_usd, breaks =20, col = "blue")
hist(rio_csv$salary_in_usd, breaks =40, col = "blue")
hist(rio_csv$salary_in_usd, breaks =40, col = "blue")
hist(rio_csv$salary_in_usd, breaks =20, col = "blue")
hist(rio_csv$salary_in_usd, breaks =30, col = "blue")
hist(rio_csv$salary_in_usd, breaks =100, col = "blue")
hist(rio_csv$salary_in_usd, breaks =20, col = "blue")
